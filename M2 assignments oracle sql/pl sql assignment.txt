SQL> ed
Wrote file afiedt.buf

  1  DECLARE
  2  V_Sample1 NUMBER(2);
  3  V_Sample2 CONSTANT NUMBER(2) ;
  4  V_Sample3 NUMBER(2) NOT NULL ;
  5  V_Sample4 NUMBER(2) := 50;
  6  V_Sample5 NUMBER(2) DEFAULT 25;
  7  BEGIN
  8  DBMS_OUTPUT.PUT_LINE("Hello");
  9* END;
SQL> /
V_Sample2 CONSTANT NUMBER(2) ;
*
ERROR at line 3:
ORA-06550: line 3, column 1: 
PLS-00322: declaration of a constant 'V_SAMPLE2' must contain an initialization 
assignment 
ORA-06550: line 3, column 11: 
PL/SQL: Item ignored 
ORA-06550: line 4, column 11: 
PLS-00218: a variable declared NOT NULL must have an initialization assignment 
ORA-06550: line 8, column 23: 
PLS-00201: identifier 'Hello' must be declared 
ORA-06550: line 8, column 1: 
PL/SQL: Statement ignored 


SQL> ed
Wrote file afiedt.buf

  1  <<outer_block>>
  2  DECLARE --outer block
  3  var_num1 NUMBER := 5;
  4  BEGIN
  5  <<inner_bloack>>
  6  DECLARE --inner block
  7  var_num1 NUMBER := 10;
  8  BEGIN
  9  DBMS_OUTPUT.PUT_LINE('Value for outerblock var_num1:' ||outer_block.var_num1);
 10  --Can outer block variable (var_num1) be printed here.If Yes,Print the same.
 11  END;
 12  --Can inner block variable(var_num1) can't be printed here.
 13* END;
SQL> /
Value for outerblock var_num1:5                                                 

PL/SQL procedure successfully completed.

  
SQL>

  1  DECLARE
  2     v_staff_code staff_Master.Staff_Code%type;
  3     v_staff_name staff_Master.Staff_Name%type;
  4     v_staff_sal staff_Master.Staff_sal%type;
  5     v_dept_code staff_Master.Dept_Code%type:=&depcode;
  6     CURSOR c_staff IS
  7             SELECT Staff_Code,Staff_Name,Staff_sal FROM staff_Master
  8                     WHERE staff_Master.Dept_Code=v_dept_code;
  9  BEGIN
 10     OPEN c_staff;
 11     LOOP
 12     FETCH c_staff INTO v_staff_code,v_staff_name,v_staff_sal;
 13             EXIT WHEN c_staff%notfound;
 14             DBMS_OUTPUT.PUT_LINE('Staff Code: '||v_staff_code);
 15             DBMS_OUTPUT.PUT_LINE('Name: '||v_staff_name);
 16             DBMS_OUTPUT.PUT_LINE('Sallary: '||v_staff_sal);
 17     END LOOP;
 18     CLOSE c_staff;
 19* END;
SQL> /
Enter value for depcode: 10
old   5:        v_dept_code staff_Master.Dept_Code%type:=&depcode;
new   5:        v_dept_code staff_Master.Dept_Code%type:=10;
Staff Code: 100003
Name: Mohan
Sallary: 24000
Staff Code: 100005
Name: John
Sallary: 32000

SQL>

  1     DECLARE
  2         v_staff_code staff_Master.Staff_Code%type;
  3         v_staff_sal staff_Master.Staff_sal%type;
  4         v_dept_code staff_Master.Dept_Code%type:=&depcode;
  5         v_updated_sal NUMBER;
  6         CURSOR c_staff IS
  7                 SELECT Staff_Code,Staff_sal FROM staff_Master
  8                         WHERE staff_Master.Dept_Code=v_dept_code;
  9      BEGIN
 10        OPEN c_staff;
 11        LOOP
 12        FETCH c_staff INTO v_staff_code,v_staff_sal;
 13                EXIT WHEN c_staff%notfound;
 14           v_updated_sal:=0.3*v_staff_sal;
 15           IF v_updated_sal>5000
 16           THEN
 17           v_updated_sal:=5000;
 18           END IF;
 19           v_updated_sal:=v_updated_sal+v_staff_sal;
 20           UPDATE staff_Master
 21             SET Staff_sal=v_updated_sal
 22           WHERE Staff_Code=v_staff_code;
 23        END LOOP;
 24        CLOSE c_staff;
 25*   END;
SQL> /
Enter value for depcode: 10
old   4:        v_dept_code staff_Master.Dept_Code%type:=&depcode;
new   4:        v_dept_code staff_Master.Dept_Code%type:=10;

PL/SQL procedure successfully completed.

SQL> SELECT Staff_Code,Staff_sal FROM staff_Master WHERE Dept_Code=10;

STAFF_CODE  STAFF_SAL
---------- ----------
    100003      29000
    100005      37000


  1     DECLARE
  2             v_student_code Student_Master.Student_Code%type;
  3             v_student_name Student_Master.Student_Name%type;
  4             v_subject1 Student_Marks.Subject1%type;
  5        v_subject2 Student_Marks.Subject2%type;
  6        v_subject3 Student_Marks.Subject3%type;
  7        v_total NUMBER;
  8        v_Percentage NUMBER(5,2);
  9        v_dept_code staff_Master.Dept_Code%type:=&depcode;
 10             CURSOR s_master IS
 11                    SELECT Student_Master.Student_Code,Student_Name,Subject1,Subject2,Subject3 FROM Student_Master
 12                     JOIN Student_Marks
 13                             ON Student_Master.Dept_Code=v_dept_code AND
 14                             Student_Master.Student_Code=Student_Marks.Student_Code;
 15       v_num NUMBER :=0;
 16          BEGIN
 17           OPEN s_master;
 18           LOOP
 19           FETCH s_master INTO v_student_code,v_student_name,v_subject1,v_subject2,v_subject3;
 20                   EXIT WHEN s_master%notfound;
 21         v_total:=v_subject1+v_subject2+v_subject3;
 22              v_Percentage:=v_total/3;
 23         IF v_num=0
 24         THEN
 25         DBMS_OUTPUT.PUT_LINE('STUDENT_CODE   '||'STUDENT_NAME  '||
 26             'SUBJECT 1  '||'SUBJECT 2  '||'SUBJECT 3  '||'Total  '||'Percentage     '||'GRADE  ');
 27              v_num:=1;
 28         END IF;
 29         DBMS_OUTPUT.PUT(v_student_code||'              '||v_student_name||'          '||
 30             v_subject1||'        '||v_subject2||'          '||v_subject3||'       '||v_total||'     '||v_Percentage||'          ' );
 31         IF v_subject1>=60 AND v_subject2>=60 AND v_subject3>=60
 32         THEN
 33             IF v_Percentage>=80
 34             THEN
 35             DBMS_OUTPUT.PUT_LINE('A');
 36             ELSIF v_Percentage>=70 AND v_Percentage<80
 37             THEN
 38             DBMS_OUTPUT.PUT_LINE('B');
 39             ELSIF v_Percentage>=60 AND v_Percentage<70
 40             THEN
 41             DBMS_OUTPUT.PUT_LINE('C');
 42             ELSE
 43             DBMS_OUTPUT.PUT_LINE('D');
 44             END IF;
 45          ELSE
 46          DBMS_OUTPUT.PUT_LINE('F');
 47          END IF;
 48           END LOOP;
 49           CLOSE s_master;
 50*     END;
SQL> /
Enter value for depcode: 10
old   9:           v_dept_code staff_Master.Dept_Code%type:=&depcode;
new   9:           v_dept_code staff_Master.Dept_Code%type:=10;
STUDENT_CODE   STUDENT_NAME  SUBJECT 1  SUBJECT 2  SUBJECT 3  Total  Percentage     GRADE
1001              Amit          55        45          78       178        59.33       F
1002              Ravi          66        74          88       228        76       B
1008              Dev          72        55          55       182        60.67       F
1014              Sunil          73        74          65       212        70.67       B
1020              Amrit          45        55          65       165        55       F
1001              Amit          68        44          92       204        68       F
1002              Ravi          89        96          78       263        87.67       A
1008              Dev          69        44          52       165        55       F
1014              Sunil          65        64          90       219        73       B
1020              Amrit          55        45          78       178        59.33       F

PL/SQL procedure successfully completed.

SQL>

  1   DECLARE
  2         /
  3         v_staff_code staff_Master.Staff_Code%type;
  4         v_staff_name staff_Master.Staff_Name%type;
  5         v_staff_sal staff_Master.Staff_sal%type;
  6         v_dept_code staff_Master.Dept_Code%type:=&depcode;
  7         CURSOR c_staff IS
  8                 SELECT Staff_Code,Staff_Name,Staff_sal FROM staff_Master
  9                         WHERE staff_Master.Dept_Code=v_dept_code;
 10      BEGIN
 11        OPEN c_staff;
 12        IF v_dept_code<0 THEN
 13     RAISE e_dep_code;
 14        END IF;
 15        LOOP
 16        FETCH c_staff INTO v_staff_code,v_staff_name,v_staff_sal;
 17                EXIT WHEN c_staff%notfound;
 18                DBMS_OUTPUT.PUT_LINE('Staff Code: '||v_staff_code);
 19                DBMS_OUTPUT.PUT_LINE('Name: '||v_staff_name);
 20                DBMS_OUTPUT.PUT_LINE('Sallary: '||v_staff_sal);
 21        END LOOP;
 22        CLOSE c_staff;
 23      EXCEPTION
 24     WHEN e_dep_code THEN
 25             DBMS_OUTPUT.PUT_LINE('Invalid Input');
 26     WHEN Others THEN
 27             DBMS_OUTPUT.PUT_LINE('Error');
 28*   END;
SQL> /
Enter value for depcode: -10
old   6:        v_dept_code staff_Master.Dept_Code%type:=&depcode;
new   6:        v_dept_code staff_Master.Dept_Code%type:=-10;
Invalid Input

PL/SQL procedure successfully completed.




  1         DECLARE
  2             e_dep_code EXCEPTION;
  3        v_staff_code staff_Master.Staff_Code%type;
  4             v_staff_sal staff_Master.Staff_sal%type;
  5             v_dept_code staff_Master.Dept_Code%type:=&depcode;
  6             v_updated_sal NUMBER;
  7             CURSOR c_staff IS
  8                     SELECT Staff_Code,Staff_sal FROM staff_Master
  9                             WHERE staff_Master.Dept_Code=v_dept_code;
 10          BEGIN
 11           OPEN c_staff;
 12     IF v_dept_code<0 THEN
 13          RAISE e_dep_code;
 14          END IF;
 15           LOOP
 16           FETCH c_staff INTO v_staff_code,v_staff_sal;
 17                   EXIT WHEN c_staff%notfound;
 18              v_updated_sal:=0.3*v_staff_sal;
 19              IF v_updated_sal>5000
 20              THEN
 21              v_updated_sal:=5000;
 22              END IF;
 23              v_updated_sal:=v_updated_sal+v_staff_sal;
 24              UPDATE staff_Master
 25                SET Staff_sal=v_updated_sal
 26              WHERE Staff_Code=v_staff_code;
 27           END LOOP;
 28           CLOSE c_staff;
 29     EXCEPTION
 30        WHEN e_dep_code THEN
 31                DBMS_OUTPUT.PUT_LINE('Invalid Input');
 32        WHEN Others THEN
 33                DBMS_OUTPUT.PUT_LINE('Error');
 34*     END;
SQL> /
Enter value for depcode: -9
old   5:            v_dept_code staff_Master.Dept_Code%type:=&depcode;
new   5:            v_dept_code staff_Master.Dept_Code%type:=-9;
Invalid Input

PL/SQL procedure successfully completed.





3.3

  1  DECLARE
  2  V_BONUS STAFF_MASTER.STAFF_SAL%TYPE;
  3  V_SAL STAFF_MASTER.STAFF_SAL%TYPE;
  4  CURSOR c_staff IS SELECT STAFF_SAL INTO V_SAL
  5     FROM STAFF_MASTER
  6             WHERE MGR_CODE=100006;
  7  e_no_data_found EXCEPTION;
  8  BEGIN
  9  OPEN c_staff;
 10  FETCH c_staff INTO V_SAL;
 11  IF c_staff%NOTFOUND
 12  THEN
 13  RAISE e_no_data_found;
 14  END IF;
 15  LOOP
 16  FETCH c_staff INTO V_SAL;
 17  EXIT WHEN c_staff%NOTFOUND;
 18  V_BONUS:=2*V_SAL;
 19  DBMS_OUTPUT.PUT_LINE('STAFF SALARY IS ' || V_SAL);
 20  DBMS_OUTPUT.PUT_LINE('STAFF BONUS IS ' || V_BONUS);
 21  END LOOP;
 22  CLOSE c_staff;
 23  EXCEPTION
 24  WHEN e_no_data_found THEN
 25  DBMS_OUTPUT.PUT_LINE('GIVEN CODE IS NOT VALID.ENTER VALID CODE');
 26* END;
SQL> /
STAFF SALARY IS 24000
STAFF BONUS IS 48000
STAFF SALARY IS 20000
STAFF BONUS IS 40000
STAFF SALARY IS 18000
STAFF BONUS IS 36000
STAFF SALARY IS 22000
STAFF BONUS IS 44000

PL/SQL procedure successfully completed.


3.4

  1  BEGIN
  2  DECLARE
  3  fname emp.ename%TYPE;
  4  BEGIN
  5  SELECT ename INTO fname
  6  FROM emp
  7  WHERE 1=2;
  8  DBMS_OUTPUT.PUT_LINE('This statement will print');
  9  END;
 10  EXCEPTION
 11  WHEN NO_DATA_FOUND THEN
 12  DBMS_OUTPUT.PUT_LINE('No data found in fname');
 13  WHEN OTHERS THEN
 14  DBMS_OUTPUT.PUT_LINE('Some outer block error');
 15* END;
SQL> /
No data found in fname

PL/SQL procedure successfully completed.



  1  DECLARE
  2  st_sal  Number(10,2);
  3  dep_code Number;
  4  CURSOR s_staffs IS SELECT max(Staff_sal) FROM staff_master where dept_code=dep_code;
  5  BEGIN
  6  dep_code:=&a;
  7  open s_staffs;
  8  LOOP
  9  FETCH s_staffs INTO st_sal;
 10  EXIT WHEN s_staffs%NOTFOUND;
 11  dbms_output.Put_line('Max salary for department is='||st_sal);
 12  END LOOP;
 13  CLOSE s_staffs;
 14* END;
SQL> /
Enter value for a: 10
old   6: dep_code:=&a;
new   6: dep_code:=10;
Max salary for department is=32000

PL/SQL procedure successfully completed.



  1  DECLARE
  2  d_date DATE;
  3  age number;
  4  Procedure ages(d IN date,a OUT number) IS
  5  BEGIN
  6  SELECT MONTHS_BETWEEN(SYSDATE,d) Into a from dual;
  7  END;
  8  BEGIN
  9  d_date:='&date';
 10  ages(d_date,age);
 11  dbms_output.put_line('AGE IS='||age/12);
 12* END;
SQL> /
Enter value for date: 26-jan-2016
old   9: d_date:='&date';
new   9: d_date:='26-jan-2016';
AGE IS=2.70556694295101553166069295101553166069

PL/SQL procedure successfully completed.



  1  DECLARE
  2  st_name Varchar2(50);
  3  st_code Number(8);
  4  CURSOR s_staffs IS SELECT UPPER(staff_name) FROM staff_master where staff_code=st_code;
  5  BEGIN
  6  st_code:='&code';
  7  open s_staffs;
  8  LOOP
  9  FETCH s_staffs INTO st_name;
 10  EXIT WHEN s_staffs%NOTFOUND;
 11  dbms_output.Put_line('NAME OF STAFF='||st_name);
 12  END LOOP;
 13  CLOSE s_staffs;
 14* END;
SQL> /
Enter value for code: 100001
old   6: st_code:='&code';
new   6: st_code:='100001';
NAME OF STAFF=ARVIND



  1  DECLARE
  2  st_code number(8);
  3  st_sal number;
  4  da number;
  5  hra number;
  6  ta number;
  7  sa number;
  8  extra number;
  9  Procedure salary(st_code IN Number , extra IN OUT number ) IS
 10  BEGIN
 11  SELECT staff_sal Into st_sal from staff_master where staff_code=st_code;
 12  da:=0.15*st_sal;
 13  hra:=0.20*st_sal;
 14  ta:=0.08*st_sal;
 15  SELECT MONTHS_BETWEEN(SYSDATE,HIREDATE) Into extra from staff_master where staff_code=st_code;
 16  if((extra/12)<1)
 17  THEN
 18  st_sal:=st_sal+ta+da+hra;
 19  ELSIF((extra/12)<2)
 20  THEN
 21  st_sal:=st_sal+hra+ta+da+(st_sal*0.10);
 22  ELSIF((extra/12)<4)
 23  THEN
 24  st_sal:=st_sal+hra+ta+da+(st_sal*0.20);
 25  ELSE
 26  st_sal:=st_sal+hra+ta+da+(st_sal*0.30);
 27  END IF;
 28  END;
 29  BEGIN
 30  st_code:=&CODE;
 31  salary(st_code,extra);
 32  dbms_output.put_line('Staff salary='||st_sal);
 33* END;
SQL> /
Enter value for code: 100001
old  30: st_code:=&CODE;
new  30: st_code:=100001;
Staff salary=29410

PL/SQL procedure successfully completed.


-LAB QUESTIONS 4
 
********LAB QUESTION 4.1*******
DECLARE
 
    m_sal STAFF_MASTERS.STAFF_SAL%TYPE;
    CURSOR mxSal_cuR(d_code NUMBER:=&EnterDeptCode)  IS
        select max(STAFF_SAL) from STAFF_MASTERS WHERE DEPT_CODE=d_code;
BEGIN
    IF NOT mxSal_cur%ISOPEN THEN
        OPEN mxSal_cur;
    END IF;
    LOOP
        FETCH mxSal_cur INTO m_sal;
        IF mxSal_cur%ROWCOUNT <1 THEN
            RAISE NO_DATA_FOUND;
        END IF;
        EXIT WHEN mxSal_cur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(m_sal);
    END LOOP;
    CLOSE mxSal_cur;
 
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('NO SUCH DeptNo');
END;
 
 
********LAB QUESTION 4.2********
CREATE OR REPLACE FUNCTION AGE_dob(d_dob date) 
                    return number AS a number;
BEGIN
    a:=round(MONTHS_BETWEEN(SYSDATE,D_DOB)/12);
       if D_DOB%notfound then
		raise no_data_found;
       end if;
    return a;
	EXCEPTION
		when no_data_found then
			dbms_output.put_line('Date of Birth Not found');
END AGE_dob;
 
DECLARE
        yrs NUMBER;
BEGIN
    yrs:=AGE_dob('22-JUL-1996');
    DBMS_OUTPUT.PUT_LINE(yrs);
END;
 
 
*********LAB QUESTION 4.3********
 create or replace procedure toUpperCase
(
SNo in staff_masters.staff_code%type,
SName out staff_masters.staff_name%type
)
as 
BEGIN
    select upper(STAFF_NAME) into SName from  staff_masters where staff_code=SNo;
    if(sql%notfound) then
        raise no_data_found;
    else 
     UPDATE staff_masters 
                SET staff_name=SName
                WHERE staff_code=SNo;
    end if;
exception
    when no_data_found then
        dbms_output.put_line('No data found');
    end;
 
 
variable name varchar2;
execute toUpperCase(&EnterStaffCode,:name);
print name;
 
 
*********LAB QUESTION 4.4**********
 
 
create or replace procedure findMGR
(
SNo in staff_masters.staff_code%type,
SId out staff_masters.staff_code%type,
SName out staff_masters.staff_name%type,
DCode out staff_masters.dept_code%type,
MName out staff_masters.staff_name%type
)
as 
BEGIN
    select a.staff_code,a.staff_name,a.dept_code,b.staff_name as manager into SId,SName,DCode,MName 
    from  staff_masters a,staff_masters b 
    where a.mgr_code=b.staff_code and a.staff_code = SNo;
    if(sql%notfound) then
        raise no_data_found;
    end if;   
    exception
        when no_data_found then
            dbms_output.put_line('staff code not found');
end;
 
variable code number
variable name varchar2
variable dcode number
variable mname varchar2
execute findMGR(&id,:code,:name,:dcode,:mname);
print code;
print name;
print dcode;
print mname;
 
 
 
**********LAB QUESTION 4.5**********
 

create or replace function CostToComp(code in number) return number
is
    sal staff_masters.staff_sal%type;
    exp number;
BEGIN
    select staff_sal,round(months_between(sysdate,hiredate)/12) as EXP into sal, exp from staff_masters where staff_code=code;
    if exp>4 then
    sal:=sal+ (0.3*sal)+(0.15*sal)+(0.2*sal)+(0.08*sal);
    elsif exp between 2 and 4 then
    sal:=sal+ (0.2*sal)+(0.15*sal)+(0.2*sal)+(0.08*sal);
    elsif exp between 1 and 2 then
    sal:=sal+ (0.1*sal)+(0.15*sal)+(0.2*sal)+(0.08*sal);
    else 
    sal:=sal+(0.15*sal)+(0.2*sal)+(0.08*sal);
    end if;
    return sal;
end;
 
DECLARE 
    CALC_SAL NUMBER;
BEGIN
    CALC_SAL:=CostToComp(&staff_code);
    dbms_output.put_line(CALC_SAL);
END;
 
 
**********LAB QUESTION 4.6**********
 
 
create or replace procedure staff_info
as
    s_name staff_masters.staff_name%type;
    d_name department_masters.dept_name%type;
    d_des designation_masters.design_name%type;
    s_sal staff_masters.staff_sal%type;
    stat VARCHAR2(10);
CURSOR STAFF IS
    select s.staff_name,d.dept_name,ds.design_name,s.staff_sal,
    CASE
        WHEN S.STAFF_SAL>(SELECT AVG(STAFF_SAL) FROM STAFF_MASTERS) THEN 'GREATER'
        WHEN S.STAFF_SAL<(SELECT AVG(STAFF_SAL) FROM STAFF_MASTERS) THEN 'LESSER'
        ELSE 'EQUAL'
    END
    FROM STAFF_MASTERS S JOIN DEPARTMENT_MASTERS D ON S.DEPT_CODE=D.DEPT_CODE
    JOIN DESIGNATION_MASTERS DS ON S.DESIGN_CODE=DS.DESIGN_CODE;
 
BEGIN
    IF NOT STAFF%ISOPEN THEN
        OPEN STAFF;
    END IF;
    LOOP
        FETCH STAFF INTO s_name, d_name, d_des, s_sal, stat;
        exit when staff%notfound;
        dbms_output.put_line(s_name || ' ' || d_name || ' ' || d_des || ' ' || s_sal || ' ' || stat);
    end loop;
    close STAFF;
	EXCEPTION 
		WHEN others then
			DBMS_OUTPUT.PUT_LINE('sorry no records found!!');
end;
SET SERVEROUTPUT ON;
EXECUTE STAFF_INFO;
 
 
**********LAB QUESTION 4.7*********

 
CREATE TABLE STAFF_MASTERS_BACK AS(SELECT * FROM STAFF_MASTERS);
TRUNCATE TABLE STAFF_MASTERS_BACK;
 
create or replace procedure staff_backup(s_code in staff_masters.staff_code%type)
    is
    exp number;
    v_sal staff_masters.staff_sal%type;
BEGIN
    insert into staff_masters_back(select * from staff_masters where staff_code=s_code);
    select staff_sal, round(months_between(sysdate,hiredate)/12) 
	into v_sal, exp from staff_masters where staff_code=s_code;
 
    if v_sal IS NULL THEN
	RAISE NO_DATA_FOUND;
 
    if exp>5 then
    	v_sal := (1.25 * v_sal);
    end if;
    if exp between 2 and 5 then
    	v_sal:= (1.20 * v_sal);
    end if;
    update staff_masters set staff_sal=v_sal;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE("NO DATA FOUND! PLS VERIFY");
end;
 
show error;
execute staff_backup(100007);
 
 
 
**********lab question 4.8**********
 

set serveroutput on;
create or replace procedure report
as
  bcode book_transactions.book_code%type:=&enter;
  code  number;
  name1 varchar2(100);
  idate book_transactions.book_issue_date%type;
  dname  designation_masters.design_name%type;
  rdate  book_transactions.book_expected_return_date%type;
  excep exception;
 
cursor mycur1 is
    select s.staff_code,s.staff_name,b.book_issue_date,d.design_name,b.book_expected_return_date 
    from staff_masters s, book_transactions b, designation_masters d 
    where b.staff_code=s.staff_code and s.design_code=d.design_code 
    and s.staff_code in (select nvl(staff_code,student_code) from book_transactions 
    where book_code=bcode and book_actual_return_date is null); 
 
  cursor mycur2 is
    select s.student_code,s.student_name,b.book_issue_date,b.book_expected_return_date 
    from student_masterss s, book_transactions b 
    where b.student_code=s.student_code 
    and s.student_code in (select nvl(staff_code,student_code) from book_transactions 
    where book_code=bcode and book_actual_return_date is null); 
BEGIN
  IF NOT mycur1%ISOPEN THEN
    OPEN mycur1;
  END IF;
 
  IF NOT mycur2%ISOPEN THEN
    OPEN mycur2;
  END IF;
 
LOOP
    FETCH mycur1 into code,name1,idate,dname,rdate;
      IF (mycur1%notfound and mycur1%rowcount=0)then
        FETCH mycur2 into code,name1,idate,rdate;
 
        IF(mycur2%notfound and mycur2%rowcount=0)then
          RAISE excep;
        ELSE
          EXIT WHEN mycur2%NOTFOUND;
          dbms_output.put_line(code||' '||name1||' '||idate||' '||dname||' '||rdate);
        END IF;
    ELSE
      EXIT WHEN mycur1%NOTFOUND; 
      dbms_output.put_line(code||' '||name1||' '||idate||' '||dname||' '||rdate);
    END IF;
  END LOOP; 
CLOSE mycur2;
  CLOSE mycur1;
 
  EXCEPTION
    WHEN excep then
    dbms_output.put_line('everyone refunded');
END; 
 
SET SERVEROUTPUT ON;
BEGIN 
 REPORT;
END;
 
 
**********LAB QUESTION 4.9***********
 
 

CREATE OR REPLACE PACKAGE staffpack
AS
exp NUMBER;
FUNCTION calc_exp(hdate date) RETURN NUMBER;
PROCEDURE calc_al(years IN NUMBER,allowance OUT NUMBER);
END staffpack;
 
CREATE OR REPLACE PACKAGE BODY staffpack AS
 
FUNCTION calc_exp(hdate date) RETURN NUMBER IS
  BEGIN 
     exp:=ROUND(MONTHS_BETWEEN(sysdate,hdate)/12); 
     RETURN exp;
  END calc_exp;
 
PROCEDURE calc_al
(years IN NUMBER,allowance OUT NUMBER) IS
BEGIN
    allowance:=years*3000;
END calc_al;
END staffpack;
 
DECLARE
    hdate date; 
    exp_yrs NUMBER(15);
    tot_al NUMBER(20);
    scode staff_masters.staff_code%TYPE:=&code;
BEGIN
    SELECT hiredate INTO hdate
    FROM staff_masters WHERE staff_code=scode;
    exp_yrs:=staffpack.calc_exp(hdate);
    staffpack.calc_al(exp_yrs,tot_al);
  INSERT INTO staff_allowance(s_code, date_of_joining,experience, allowance)
    VALUES(scode,hdate,exp_yrs,tot_al);  
 
END;
/   
create table staff_allowance(s_code number, date_of_joining date, 
experience number, allowance number);
 
 
*********LAB QUESTION 4.10**********
 
 
create or replace procedure insertrecords
(bcode in book_transactions.book_code%type,
code in number
)as
code1 number;
exc exception;
doe varchar2(50);
doe1 date;
cursor mycur1 is 
select staff_code from staff_masters where staff_code=code;
cursor mycur2 is 
select student_code from student_masters where student_code=code;
begin 
select to_char(sysdate+10,'DAY') INTO doe FROM DUAL;
if(doe='SATURDAY') then
select (sysdate+12) INTO doe1 FROM DUAL;
elsif (doe='SUNDAY')then
select (sysdate+11) INTO doe1 FROM DUAL;
else
select (sysdate+10) INTO doe1 FROM DUAL;
end if;
open mycur1;
open mycur2;
loop
fetch mycur1 into code1;
if(mycur1%notfound and mycur1%rowcount=0) then
fetch mycur2 into code1;
if(mycur2%notfound and mycur2%rowcount=0) then
raise exc;
else
exit when(mycur2%notfound);
insert into book_transactions values(bcode,code1,null,sysdate,doe1,null);
end if; 
else
exit when(mycur1%notfound);
insert into book_transactions values(bcode,null,code1,sysdate,doe1,null);
end if;
end loop;
exception
when exc then
dbms_output.put_line('not found');
end;
 
/
show error;
delete from  book_transactions where book_issue_date LIKE '%07-OCT-17%';
 
execute insertrecords(10000007,100002);
execute insertrecords('10000002','1015'); 
 
 
 
*********LAB QUESTION 4.11*********
 

CREATE OR REPLACE FUNCTION count_Row(t_name VARCHAR2)
RETURN NUMBER IS
countrow NUMBER;
BEGIN
    EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM '||t_name INTO countrow;
    dbms_output.put_line(countrow);
    RETURN countrow;
END;
 
DECLARE
    v_count NUMBER;
BEGIN
    v_count:=count_Row('staff_masters');
END;
/ 
 
 
 
**********LAB QUESTION 4.12*********
 
/*Tune the following Oracle Procedure enabling to gain better performance.
Objective:The Procedure should update the salary of an employee and at the same time retrieve the employee's name and new salary into PL/SQL variables.*/
 
 CREATE OR REPLACE PROCEDURE update_salary (emp_id IN NUMBER) IS
    v_name VARCHAR2(15);
    v_newsal NUMBER;
 BEGIN
   UPDATE emp SET sal= sal * 1.1
   WHERE empno = emp_id;
 
   SELECT ename, sal INTO v_name, v_newsal
   FROM emp
   WHERE empno = emp_id;
 
   DBMS_OUTPUT.PUT_LINE('Emp Name:' || v_name);
   DBMS_OUTPUT.PUT_LINE('Ename:' || v_newsal);
 END;
/ 
 
 
**********LAB QUESTION 4.13**********
 
 
 
 CREATE OR REPLACE PROCEDURE gettable(table_name in varchar2) AS
 BEGIN
      EXECUTE IMMEDIATE 'DELETE FROM '||table_name;
 END;
/ 
 
***********LAB QUESTION 4.14**********
 

 
CREATE or REPLACE PROCEDURE get_details  
AS
  dno number;
  co number;
  su number;
  max1 number;
  avg1 number;
 
  en varchar(25);
  jb varchar(25);
  sal1 number;
  cmm number; 
  dno1 number:=&DCODE;
 
  CURSOR gd_cr IS
  	SELECT deptno, count(empno), sum(sal), max(sal), round(avg(sal),2) 
  	from emp 
  	where deptno=dno1 
  	group by deptno;
 
  CURSOR gd_cr1 IS 
  	SELECT ename, job, sal, comm
  	from emp where deptno=dno1; 
BEGIN
 
  IF NOT gd_cr%ISOPEN THEN
    OPEN gd_cr;
  END IF;
 
 
  IF NOT gd_cr1%ISOPEN THEN
    OPEN gd_cr1;
  END IF; 
 
  LOOP  
  FETCH gd_cr1 into en,jb,sal1,cmm;
    EXIT WHEN gd_cr1%NOTFOUND ;
 
    DBMS_OUTPUT.PUT_LINE('EMP NAME '||en);
    DBMS_OUTPUT.PUT_LINE('EMP JOB '||jb);
    DBMS_OUTPUT.PUT_LINE('EMP SAL '||sal1);
    DBMS_OUTPUT.PUT_LINE('EMP Comm '||cmm);
    DBMS_OUTPUT.PUT_LINE('*************************'); 
END LOOP;
 
  LOOP
  FETCH gd_cr into dno, co, su, max1, avg1;
     EXIT WHEN gd_cr%NOTFOUND ;
     DBMS_OUTPUT.PUT_LINE('DEPT NO '||dno);
     DBMS_OUTPUT.PUT_LINE('COUNT  '||co);
     DBMS_OUTPUT.PUT_LINE('TOTAL SAL '||su);
     DBMS_OUTPUT.PUT_LINE('MAX SAL '||max1);
     DBMS_OUTPUT.PUT_LINE('AVG  SAL '||avg1);
  END LOOP;
END; 
/  
 
********LAB QUESTION 4.15*********
 
 
SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE IN ('FUNCTION','PROCEDURE','PACKAGE'); 
 
 
Trigger 1


  1  CREATE     PROCEDURE CHECK_SALARY(n_jobID IN NUMBER,SALARY IN NUMBER) IS
  2     BEGIN
  3             DBMS_OUTPUT.PUT_LINE('Staff Code: '||n_jobID);
  4             DBMS_OUTPUT.PUT_LINE('Salary: '||SALARY);
  5*    END;
SQL> /

Procedure created.

SQL> ed
Wrote file afiedt.buf

  1  CREATE OR REPLACE TRIGGER CHECK_SALARY_TRG
  2  BEFORE INSERT OR UPDATE ON staff_Master
  3  FOR EACH ROW
  4  BEGIN
  5     CHECK_SALARY(:new.staff_code,:new.Staff_sal);
  6     DBMS_OUTPUT.PUT_LINE('Hello');
  7* END;
SQL> /

Trigger created.
SQL> INSERT INTO staff_Master Values(100016,'Ram',104,30,'15-JAN-75','19-FEB-09',100006,32500,'BANGALORE');
Staff Code: 100016
Salary: 32500
Hello

1 row created.

Trigger 2.a


  1          CREATE OR REPLACE TRIGGER check_salary_trg
  2          BEFORE INSERT OR UPDATE ON staff_Master
  3          FOR EACH ROW
  4          WHEN (new.staff_code <> NVL(old.staff_code,0) OR new.staff_sal <> NVL(old.staff_sal,0))
  5          DECLARE
  6          PROCEDURE CHECK_SALARY(n_jobID IN NUMBER,SALARY IN NUMBER) IS
  7          BEGIN
  8                  DBMS_OUTPUT.PUT_LINE('Staff Code: '||n_jobID);
  9                 DBMS_OUTPUT.PUT_LINE('Salary: '||SALARY);
 10        END;
 11        BEGIN
 12        check_salary(:new.staff_code, :new.staff_sal);
 13*      END;
 14  /

Trigger created.

SQL> UPDATE staff_master
  2  SET staff_sal=100056 WHERE staff_code=100001;
Staff Code: 100001
Salary: 100056

1 row updated.

SQL> INSERT INTO staff_master
  2  VALUES(100069,'Allen',103,30,'22-Jan-80','23-Apr-01',100005,42000,'Chennai'
);
Staff Code: 100069
Salary: 42000

1 row created.

TRIGGER 3


  1  CREATE OR REPLACE TRIGGER DELETE_EMP_TRG
  2  BEFORE DELETE ON emp
  3  FOR EACH ROW
  4  DECLARE
  5     V_DAY VARCHAR2(3):=TO_CHAR(SYSDATE,'DY');
  6     V_HRS PLS_INTEGER:=TO_NUMBER(TO_CHAR(SYSDATE,'HH24'));
  7  BEGIN
  8     IF(V_HRS BETWEEN 9 AND 18)AND(V_DAY NOT IN('SAT','SUN'))THEN
  9             RAISE_APPLICATION_ERROR(-20150,'Employee cannot be deleted durin
g the week 9am and 6pm');
 10     END IF;
 11* END;
SQL> /

Trigger created.

SQL> DELETE FROM emp WHERE EMPNO=7902;
DELETE FROM emp WHERE EMPNO=7902
            *
ERROR at line 1:
ORA-20150: Employee cannot be deleted during the week 9am and 6pm
ORA-06512: at "SYSTEM.DELETE_EMP_TRG", line 6
ORA-04088: error during execution of trigger 'SYSTEM.DELETE_EMP_TRG'
 


